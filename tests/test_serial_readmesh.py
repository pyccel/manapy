#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 20 20:51:37 2020
@author: kissami
"""
from mpi4py import MPI
from numpy import set_printoptions
import numpy as np
import os

from manapy.ddm import readmesh
from manapy.ddm import Domain

COMM = MPI.COMM_WORLD
SIZE = COMM.Get_size()
RANK = COMM.Get_rank()

# ... get the mesh directory
try:
    MESH_DIR = os.environ['MESH_DIR']
 
except:
    BASE_DIR = os.path.dirname(os.path.realpath(__file__))
    BASE_DIR = os.path.join(BASE_DIR , '..')
    MESH_DIR = os.path.join(BASE_DIR, 'mesh')

filename = "rectangle.msh"
filename = os.path.join(MESH_DIR, filename)

dim = 2
readmesh(filename, dim=dim)

COMM.Barrier()
#Create the informations about cells, faces and nodes
domain = Domain(dim=dim)

faces = domain.faces
cells = domain.cells
halos = domain.halos
nodes = domain.nodes

nbnodes = domain.nbnodes
nbfaces = domain.nbfaces
nbelements = domain.nbcells
cells._cellnid = np.sort(cells.cellnid)
set_printoptions(precision=25)


def test_serial_readmesh():

    assert nbelements == 40
    assert nbnodes    == 29
    assert nbfaces    == 68

    # Check cells information
    assert (cells.center == np.array([[0.5000000000011513  , 0.0623550811858408  , 0.                  ],
           [0.5395686518988163  , 0.3896044259353535  , 0.                  ],
           [0.45753033394384085 , 0.44691666544952435 , 0.                  ],
           [0.5921942238516433  , 0.11293054723308343 , 0.                  ],
           [0.4124346248856095  , 0.11362995740660183 , 0.                  ],
           [0.5062353185659683  , 0.28529284045452763 , 0.                  ],
           [0.2410928444925378  , 0.40103240598733625 , 0.                  ],
           [0.766181693833901   , 0.3960986835298535  , 0.                  ],
           [0.7780302507132542  , 0.09604174742558949 , 0.                  ],
           [0.22737007281237365 , 0.09685772596118769 , 0.                  ],
           [0.3241970006107112  , 0.44691666544952435 , 0.                  ],
           [0.6820383179541072  , 0.4426877604858291  , 0.                  ],
           [0.7532187308713724  , 0.3127653501967127  , 0.                  ],
           [0.25405580745541784 , 0.31769907265386055 , 0.                  ],
           [0.9525026935288741  , 0.10102183693413358 , 0.                  ],
           [0.05022917721481819 , 0.39856018498210993 , 0.                  ],
           [0.9508100425461092  , 0.3978553674886228  , 0.                  ],
           [0.04826878126050903 , 0.10113840529584375 , 0.                  ],
           [0.6921942238515092  , 0.050575466047242626, 0.                  ],
           [0.3124346248857527  , 0.05127487622076103 , 0.                  ],
           [0.8858360268622074  , 0.045466281378346865, 0.                  ],
           [0.8841433758792672  , 0.4534109230440243  , 0.                  ],
           [0.1149354479274531  , 0.04558284974042666 , 0.                  ],
           [0.11689584388133747 , 0.45411574053781184 , 0.                  ],
           [0.24033303577482892 , 0.18019105929437865 , 0.                  ],
           [0.7650672877505502  , 0.17937508075911537 , 0.                  ],
           [0.6946029121763099  , 0.2432632265332643  , 0.                  ],
           [0.6075658751391482  , 0.22228497438557926 , 0.                  ],
           [0.4032982921629217  , 0.22721328952279288 , 0.                  ],
           [0.31626125512552017 , 0.24819154167014307 , 0.                  ],
           [0.03330204762625711 , 0.2499692439055446  , 0.                  ],
           [0.9668827171237901  , 0.24988542902322947 , 0.                  ],
           [0.9193854106526642  , 0.18424059929031114 , 0.                  ],
           [0.0835312248410753  , 0.3151960955546059  , 0.                  ],
           [0.9176927596698994  , 0.3144074631781338  , 0.                  ],
           [0.08157082888676614 , 0.18444098253500646 , 0.                  ],
           [0.8397557810232934  , 0.21201837706805032 , 0.                  ],
           [0.16316085447047468 , 0.28741831777683213 , 0.                  ],
           [0.8380631300405287  , 0.28662968540039446 , 0.                  ],
           [0.1612004585161655  , 0.2122187603127803  , 0.                  ]])).all()
            
    assert (cells.volume == np.array([0.01870652435572628  , 0.023221881741484627 ,
           0.01592500036514044  , 0.01474929796021835  ,
           0.013555364412082771 , 0.020210029657953453 ,
           0.015805320846293866 , 0.015261375434670911 ,
           0.012779737438919365 , 0.01363312466691682  ,
           0.015925000365096257 , 0.017193671854296523 ,
           0.00990250347119905  , 0.011512666880582728 ,
           0.011874326617830869 , 0.01255729430373762  ,
           0.012297489363438554 , 0.012067195315097184 ,
           0.015172639814067563 , 0.015382462866292317 ,
           0.013639884413504073 , 0.013976723086829495 ,
           0.0136748549221849   , 0.013765277838626019 ,
           0.010097031814189882 , 0.009537902917971816 ,
           0.008949826970537055 , 0.015030671991794088 ,
           0.014619533623028778 , 0.010895004980053465 ,
           0.008325511906563101 , 0.008279320719040981 ,
           0.007416257212449956 , 0.007734931825701825 ,
           0.007510359855296284 , 0.00752141899933551  ,
           0.007909218087257412 , 0.0078112317770673385,
           0.00770647093556876  , 0.00786565839195371  ])).all()
    
    
    assert (cells.nodeid == np.array([[11, 18, 12],
           [ 6, 19, 20],
           [ 5, 19,  6],
           [11, 21, 18],
           [12, 18, 22],
           [18, 20, 19],
           [ 4, 24, 19],
           [ 7, 20, 25],
           [10, 23, 21],
           [13, 22, 26],
           [ 4, 19,  5],
           [ 6, 20,  7],
           [16, 25, 20],
           [17, 19, 24],
           [ 1,  9, 23],
           [ 3, 15, 24],
           [ 2, 25,  8],
           [ 0, 26, 14],
           [10, 21, 11],
           [12, 22, 13],
           [ 1, 23, 10],
           [ 2,  7, 25],
           [ 0, 13, 26],
           [ 3, 24,  4],
           [17, 26, 22],
           [16, 21, 23],
           [16, 20, 21],
           [18, 21, 20],
           [18, 19, 22],
           [17, 22, 19],
           [14, 27, 15],
           [ 8, 28,  9],
           [ 9, 28, 23],
           [15, 27, 24],
           [ 8, 25, 28],
           [14, 26, 27],
           [16, 23, 28],
           [17, 24, 27],
           [16, 28, 25],
           [17, 27, 26]])).all()
    
    assert (cells.faceid == np.array([[31, 34, 30],
           [18, 57, 19],
           [16, 18, 15],
           [32, 55, 31],
           [34, 56, 35],
           [54, 57, 53],
           [14, 59, 13],
           [20, 61, 21],
           [29, 62, 28],
           [36, 63, 37],
           [13, 16, 12],
           [19, 20, 17],
           [46, 61, 43],
           [48, 59, 50],
           [ 3, 25,  5],
           [10, 41, 11],
           [ 8, 23,  7],
           [ 2, 39,  1],
           [28, 32, 27],
           [35, 36, 33],
           [ 5, 29,  4],
           [ 6, 21,  8],
           [ 0, 37,  2],
           [11, 14,  9],
           [51, 63, 49],
           [44, 62, 45],
           [43, 60, 44],
           [55, 60, 54],
           [53, 58, 56],
           [49, 58, 48],
           [40, 42, 38],
           [24, 26, 22],
           [26, 64, 25],
           [42, 65, 41],
           [23, 66, 24],
           [39, 67, 40],
           [45, 64, 47],
           [50, 65, 52],
           [47, 66, 46],
           [52, 67, 51]])).all()
    
    assert (cells.cellfid == np.array([[ 3,  4, -1],
           [ 2,  5, 11],
           [10,  1, -1],
           [18, 27,  0],
           [ 0, 28, 19],
           [27,  1, 28],
           [23, 13, 10],
           [11, 12, 21],
           [20, 25, 18],
           [19, 24, 22],
           [ 6,  2, -1],
           [ 1,  7, -1],
           [38,  7, 26],
           [29,  6, 37],
           [-1, 32, 20],
           [-1, 33, 23],
           [21, 34, -1],
           [22, 35, -1],
           [ 8,  3, -1],
           [ 4,  9, -1],
           [14,  8, -1],
           [-1,  7, 16],
           [-1,  9, 17],
           [15,  6, -1],
           [39,  9, 29],
           [26,  8, 36],
           [12, 27, 25],
           [ 3, 26,  5],
           [ 5, 29,  4],
           [24, 28, 13],
           [35, 33, -1],
           [34, 32, -1],
           [31, 36, 14],
           [30, 37, 15],
           [16, 38, 31],
           [17, 39, 30],
           [25, 32, 38],
           [13, 33, 39],
           [36, 34, 12],
           [37, 35, 24]])).all()
    
    assert (cells.cellnid == np.sort(np.array([[ 3, 18,  4,  5, 27, 28, 19, -1, -1, -1, -1, -1, -1, -1, -1,  7],
           [ 2, 11,  5,  6, 10, 13, 28, 29,  7, 12, 26, 27, -1, -1, -1, 12],
           [10,  1,  5,  6, 13, 28, 29, 11, -1, -1, -1, -1, -1, -1, -1,  8],
           [ 0, 18,  8, 25, 26, 27,  4,  5, 28, -1, -1, -1, -1, -1, -1,  9],
           [ 0, 19,  3,  5, 27, 28,  9, 24, 29, -1, -1, -1, -1, -1, -1,  9],
           [ 0,  3,  4, 27, 28,  1,  7, 11, 12, 26,  2,  6, 10, 13, 29, 15],
           [10, 23, 13, 15, 33, 37,  1,  2,  5, 28, 29, -1, -1, -1, -1, 11],
           [11, 21,  1,  5, 12, 26, 27, 16, 34, 38, -1, -1, -1, -1, -1, 10],
           [18, 20, 14, 25, 32, 36,  3, 26, 27, -1, -1, -1, -1, -1, -1,  9],
           [19, 22,  4, 24, 28, 29, 17, 35, 39, -1, -1, -1, -1, -1, -1,  9],
           [ 6, 23,  1,  2,  5, 13, 28, 29, -1, -1, -1, -1, -1, -1, -1,  8],
           [ 1,  2,  5,  7, 12, 26, 27, 21, -1, -1, -1, -1, -1, -1, -1,  8],
           [25, 26, 36, 38,  7, 16, 21, 34,  1,  5, 11, 27, -1, -1, -1, 12],
           [24, 29, 37, 39,  1,  2,  5,  6, 10, 28, 15, 23, 33, -1, -1, 13],
           [20, 31, 32,  8, 25, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [23, 30, 33,  6, 13, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [21,  7, 12, 34, 38, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [22,  9, 24, 35, 39, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [ 8, 20,  3, 25, 26, 27,  0, -1, -1, -1, -1, -1, -1, -1, -1,  7],
           [ 0,  4,  9, 24, 28, 29, 22, -1, -1, -1, -1, -1, -1, -1, -1,  7],
           [14,  8, 25, 32, 36, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [16,  7, 11, 12, 34, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [17,  9, 19, 24, 35, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [15,  6, 13, 33, 37, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [13, 29, 37, 39,  9, 17, 22, 35,  4, 19, 28, -1, -1, -1, -1, 11],
           [12, 26, 36, 38,  3,  8, 18, 27, 14, 20, 32, -1, -1, -1, -1, 11],
           [12, 25, 36, 38,  1,  5,  7, 11, 27,  3,  8, 18, -1, -1, -1, 12],
           [ 0,  3,  4,  5, 28,  8, 18, 25, 26,  1,  7, 11, 12, -1, -1, 13],
           [ 0,  3,  4,  5, 27,  1,  2,  6, 10, 13, 29,  9, 19, 24, -1, 14],
           [13, 24, 37, 39,  4,  9, 19, 28,  1,  2,  5,  6, 10, -1, -1, 13],
           [17, 35, 33, 37, 39, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [16, 34, 32, 36, 38, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1,  6],
           [14, 31, 34, 36, 38,  8, 20, 25, -1, -1, -1, -1, -1, -1, -1,  8],
           [15, 30, 35, 37, 39,  6, 13, 23, -1, -1, -1, -1, -1, -1, -1,  8],
           [16, 31,  7, 12, 21, 38, 32, 36, -1, -1, -1, -1, -1, -1, -1,  8],
           [17, 30,  9, 22, 24, 39, 33, 37, -1, -1, -1, -1, -1, -1, -1,  8],
           [12, 25, 26, 38,  8, 14, 20, 32, 31, 34, -1, -1, -1, -1, -1, 10],
           [13, 24, 29, 39,  6, 15, 23, 33, 30, 35, -1, -1, -1, -1, -1, 10],
           [12, 25, 26, 36, 31, 32, 34,  7, 16, 21, -1, -1, -1, -1, -1, 10],
           [13, 24, 29, 37, 30, 33, 35,  9, 17, 22, -1, -1, -1, -1, -1, 10]]))).all()
    
    
    # Check nodes information
    assert (nodes.vertex == np.array([[0.                 , 0.                 , 0.                 ,
            1.                 ],
           [1.                 , 0.                 , 0.                 ,
            2.                 ],
           [1.                 , 0.5                , 0.                 ,
            2.                 ],
           [0.                 , 0.5                , 0.                 ,
            1.                 ],
           [0.1999999999995579 , 0.5                , 0.                 ,
            3.                 ],
           [0.3999999999989749 , 0.5                , 0.                 ,
            3.                 ],
           [0.5999999999989468 , 0.5                , 0.                 ,
            3.                 ],
           [0.7999999999994734 , 0.5                , 0.                 ,
            3.                 ],
           [1.                 , 0.3333333333337956 , 0.                 ,
            2.                 ],
           [1.                 , 0.1666666666673601 , 0.                 ,
            2.                 ],
           [0.7999999999999998 , 0.                 , 0.                 ,
            4.                 ],
           [0.6000000000013869 , 0.                 , 0.                 ,
            4.                 ],
           [0.4000000000016644 , 0.                 , 0.                 ,
            4.                 ],
           [0.2000000000008322 , 0.                 , 0.                 ,
            4.                 ],
           [0.                 , 0.1666666666662513 , 0.                 ,
            1.                 ],
           [0.                 , 0.3333333333328944 , 0.                 ,
            1.                 ],
           [0.7611111111118876 , 0.2500000000005777 , 0.                 ,
            0.                 ],
           [0.2388888888881981 , 0.2499999999995729 , 0.                 ,
            0.                 ],
           [0.5000000000004026 , 0.1870652435575224 , 0.                 ,
            0.                 ],
           [0.3725910018336009 , 0.3407499963485732 , 0.                 ,
            0.                 ],
           [0.6461149538639015 , 0.3280632814574874 , 0.                 ,
            0.                 ],
           [0.6765826715531407 , 0.1517263981417279 , 0.                 ,
            0.                 ],
           [0.3373038746547616 , 0.1538246286622831 , 0.                 ,
            0.                 ],
           [0.8575080805866224 , 0.1363988441350406 , 0.                 ,
            0.                 ],
           [0.1506875316444546 , 0.3623472216134355 , 0.                 ,
            0.                 ],
           [0.852430127638328  , 0.3602327691320731 , 0.                 ,
            0.                 ],
           [0.1448063437815271 , 0.13674854922128   , 0.                 ,
            0.                 ],
           [0.09990614287877134, 0.2499077317174881 , 0.                 ,
            0.                 ],
           [0.9006481513713704 , 0.2496562870685327 , 0.                 ,
            0.                 ]])).all()
    
    assert (nodes.name== np.array([1, 2, 2, 1, 3, 3, 3, 3, 2, 2, 4, 4, 4, 4, 1, 1, 0, 0, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0])).all()
    
    # assert (nodes.ghostcenter == [[[0.11493544792745312, -0.04558284974042666, 22, 4, 0],
    #   [-0.04826878126050903, 0.10113840529584375, 17, 1, 1]],
    #  [[1.047497306471126, 0.10102183693413358, 14, 2, 3],
    #   [0.8858360268622074, -0.045466281378346865, 20, 4, 4]],
    #  [[0.8841433758792672, 0.5465890769559757, 21, 3, 6],
    #   [1.0491899574538908, 0.3978553674886228, 16, 2, 7]],
    #  [[0.1168958438813375, 0.5458842594621882, 23, 3, 9],
    #   [-0.05022917721481819, 0.39856018498210993, 15, 1, 10]],
    #  [[0.1168958438813375, 0.5458842594621882, 23, 3, 9],
    #   [0.3241970006107112, 0.5530833345504756, 10, 3, 12]],
    #  [[0.3241970006107112, 0.5530833345504756, 10, 3, 12],
    #   [0.45753033394384096, 0.5530833345504756, 2, 3, 15]],
    #  [[0.45753033394384096, 0.5530833345504756, 2, 3, 15],
    #   [0.6820383179541072, 0.557312239514171, 11, 3, 17]],
    #  [[0.8841433758792672, 0.5465890769559757, 21, 3, 6],
    #   [0.6820383179541072, 0.557312239514171, 11, 3, 17]],
    #  [[1.0491899574538908, 0.3978553674886228, 16, 2, 7],
    #   [1.0331172828762099, 0.24988542902322947, 31, 2, 22]],
    #  [[1.047497306471126, 0.10102183693413358, 14, 2, 3],
    #   [1.0331172828762099, 0.24988542902322947, 31, 2, 22]],
    #  [[0.8858360268622074, -0.045466281378346865, 20, 4, 4],
    #   [0.6921942238515092, -0.050575466047242626, 18, 4, 27]],
    #  [[0.6921942238515092, -0.050575466047242626, 18, 4, 27],
    #   [0.5000000000011513, -0.0623550811858408, 0, 4, 30]],
    #  [[0.5000000000011513, -0.0623550811858408, 0, 4, 30],
    #   [0.3124346248857527, -0.05127487622076103, 19, 4, 33]],
    #  [[0.11493544792745312, -0.04558284974042666, 22, 4, 0],
    #   [0.3124346248857527, -0.05127487622076103, 19, 4, 33]],
    #  [[-0.04826878126050903, 0.10113840529584375, 17, 1, 1],
    #   [-0.03330204762625711, 0.24996924390554454, 30, 1, 38]],
    #  [[-0.05022917721481819, 0.39856018498210993, 15, 1, 10],
    #   [-0.03330204762625711, 0.24996924390554454, 30, 1, 38]],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  [],
    #  []])
    
    assert (nodes.cellid == np.array([[17, 22, -1, -1, -1, -1, -1, -1,  2],
           [14, 20, -1, -1, -1, -1, -1, -1,  2],
           [16, 21, -1, -1, -1, -1, -1, -1,  2],
           [15, 23, -1, -1, -1, -1, -1, -1,  2],
           [ 6, 10, 23, -1, -1, -1, -1, -1,  3],
           [ 2, 10, -1, -1, -1, -1, -1, -1,  2],
           [ 1,  2, 11, -1, -1, -1, -1, -1,  3],
           [ 7, 11, 21, -1, -1, -1, -1, -1,  3],
           [16, 31, 34, -1, -1, -1, -1, -1,  3],
           [14, 31, 32, -1, -1, -1, -1, -1,  3],
           [ 8, 18, 20, -1, -1, -1, -1, -1,  3],
           [ 0,  3, 18, -1, -1, -1, -1, -1,  3],
           [ 0,  4, 19, -1, -1, -1, -1, -1,  3],
           [ 9, 19, 22, -1, -1, -1, -1, -1,  3],
           [17, 30, 35, -1, -1, -1, -1, -1,  3],
           [15, 30, 33, -1, -1, -1, -1, -1,  3],
           [12, 25, 26, 36, 38, -1, -1, -1,  5],
           [13, 24, 29, 37, 39, -1, -1, -1,  5],
           [ 0,  3,  4,  5, 27, 28, -1, -1,  6],
           [ 1,  2,  5,  6, 10, 13, 28, 29,  8],
           [ 1,  5,  7, 11, 12, 26, 27, -1,  7],
           [ 3,  8, 18, 25, 26, 27, -1, -1,  6],
           [ 4,  9, 19, 24, 28, 29, -1, -1,  6],
           [ 8, 14, 20, 25, 32, 36, -1, -1,  6],
           [ 6, 13, 15, 23, 33, 37, -1, -1,  6],
           [ 7, 12, 16, 21, 34, 38, -1, -1,  6],
           [ 9, 17, 22, 24, 35, 39, -1, -1,  6],
           [30, 33, 35, 37, 39, -1, -1, -1,  5],
           [31, 32, 34, 36, 38, -1, -1, -1,  5]])).all()
    
    
    assert (faces.name == np.array([4, 1, 0, 2, 4, 0, 3, 2, 0, 3, 1, 0, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0,
           2, 0, 0, 0, 0, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0, 0])).all()
    
    assert (faces.center == np.array([[0.1000000000004161 , 0.                 , 0.                 ],
           [0.                 , 0.08333333333312565, 0.                 ],
           [0.07240317189076355, 0.06837427461064   , 0.                 ],
           [1.                 , 0.08333333333368005, 0.                 ],
           [0.8999999999999999 , 0.                 , 0.                 ],
           [0.9287540402933112 , 0.0681994220675203 , 0.                 ],
           [0.8999999999997367 , 0.5                , 0.                 ],
           [1.                 , 0.4166666666668978 , 0.                 ],
           [0.926215063819164  , 0.4301163845660365 , 0.                 ],
           [0.09999999999977895, 0.5                , 0.                 ],
           [0.                 , 0.4166666666664472 , 0.                 ],
           [0.0753437658222273 , 0.4311736108067178 , 0.                 ],
           [0.2999999999992664 , 0.5                , 0.                 ],
           [0.2862955009165794 , 0.4203749981742866 , 0.                 ],
           [0.17534376582200623, 0.4311736108067178 , 0.                 ],
           [0.49999999999896083, 0.5                , 0.                 ],
           [0.3862955009162879 , 0.4203749981742866 , 0.                 ],
           [0.6999999999992101 , 0.5                , 0.                 ],
           [0.4862955009162738 , 0.4203749981742866 , 0.                 ],
           [0.6230574769314241 , 0.4140316407287437 , 0.                 ],
           [0.7230574769316874 , 0.4140316407287437 , 0.                 ],
           [0.8262150638189008 , 0.4301163845660365 , 0.                 ],
           [1.                 , 0.25000000000057787, 0.                 ],
           [0.926215063819164  , 0.34678305123293435, 0.                 ],
           [0.9503240756856852 , 0.2914948102011642 , 0.                 ],
           [0.9287540402933112 , 0.15153275540120037, 0.                 ],
           [0.9503240756856852 , 0.2081614768679464 , 0.                 ],
           [0.7000000000006934 , 0.                 , 0.                 ],
           [0.7382913357765702 , 0.07586319907086395, 0.                 ],
           [0.8287540402933111 , 0.0681994220675203 , 0.                 ],
           [0.5000000000015257 , 0.                 , 0.                 ],
           [0.5500000000008947 , 0.0935326217787612 , 0.                 ],
           [0.6382913357772637 , 0.07586319907086395, 0.                 ],
           [0.3000000000012483 , 0.                 , 0.                 ],
           [0.45000000000103346, 0.0935326217787612 , 0.                 ],
           [0.368651937328213  , 0.07691231433114155, 0.                 ],
           [0.2686519373277969 , 0.07691231433114155, 0.                 ],
           [0.17240317189117965, 0.06837427461064   , 0.                 ],
           [0.                 , 0.24999999999957284, 0.                 ],
           [0.07240317189076355, 0.15170760794376564, 0.                 ],
           [0.04995307143938567, 0.2082871991918697 , 0.                 ],
           [0.0753437658222273 , 0.3478402774731649 , 0.                 ],
           [0.04995307143938567, 0.29162053252519127, 0.                 ],
           [0.7036130324878945 , 0.28903164072903254, 0.                 ],
           [0.7188468913325141 , 0.2008631990711528 , 0.                 ],
           [0.809309595849255  , 0.19319942206780916, 0.                 ],
           [0.8067706193751079 , 0.3051163845663254 , 0.                 ],
           [0.830879631241629  , 0.2498281435345552 , 0.                 ],
           [0.3057399453608995 , 0.2953749981740731 , 0.                 ],
           [0.28809638177147984, 0.201912314330928  , 0.                 ],
           [0.19478821026632634, 0.3061736108065042 , 0.                 ],
           [0.19184761633486258, 0.19337427461042644, 0.                 ],
           [0.16939751588348473, 0.2499538658585305 , 0.                 ],
           [0.43629550091700176, 0.2639076199530478 , 0.                 ],
           [0.573057476932152  , 0.2575642625075049 , 0.                 ],
           [0.5882913357767716 , 0.16939582084962515, 0.                 ],
           [0.4186519373275821 , 0.17044493610990274, 0.                 ],
           [0.5093529778487512 , 0.33440663890303035, 0.                 ],
           [0.35494743824418123, 0.24728731250542818, 0.                 ],
           [0.2616392667390277 , 0.3515486089810044 , 0.                 ],
           [0.6613488127085211 , 0.23989483979960766, 0.                 ],
           [0.7492725407511147 , 0.3441480252947803 , 0.                 ],
           [0.7670453760698815 , 0.14406262113838425, 0.                 ],
           [0.24105510921814433, 0.14528658894178154, 0.                 ],
           [0.8790781159789964 , 0.19302756560178666, 0.                 ],
           [0.12529683726161295, 0.3061274766654618 , 0.                 ],
           [0.8765391395048492 , 0.3049445281003029 , 0.                 ],
           [0.12235624333014922, 0.19332814046938404, 0.                 ]])).all()
    
    assert (faces.ghostcenter == np.array([[ 0.11493544792745312 , -0.04558284974042666 ,
             0.5746772396348743  ],
           [-0.04826878126050903 ,  0.10113840529584375 ,
             0.6068304317765749  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 1.047497306471126   ,  0.10102183693413358 ,
             0.6061310216022796  ],
           [ 0.8858360268622074  , -0.045466281378346865,
             0.5708198656889624  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.8841433758792672  ,  0.5465890769559757  ,
             0.5792831206021387  ],
           [ 1.0491899574538908  ,  0.3978553674886228  ,
             0.6128677950699629  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.1168958438813375  ,  0.5458842594621882  ,
             0.5844792194079794  ],
           [-0.05022917721481819 ,  0.39856018498210993 ,
             0.6086388901057375  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.3241970006107112  ,  0.5530833345504756  ,
             0.6209850030575768  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.45753033394384096 ,  0.5530833345504756  ,
             0.2876516697243701  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.6820383179541072  ,  0.557312239514171   ,
             0.41019158977472187 ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 1.0331172828762099  ,  0.24988542902322947 ,
             0.5006874258640912  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.6921942238515092  , -0.050575466047242626,
             0.5390288807461915  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.5000000000011513  , -0.0623550811858408  ,
             0.5000000000018717  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [ 0.3124346248857527  , -0.05127487622076103 ,
             0.4378268755777368  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-0.03330204762625711 ,  0.24996924390554454 ,
             0.49981546343583044 ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ],
           [-1.                  , -1.                  ,
            -1.                  ]])).all()
    
    assert (faces.cellid == np.array([[22, -1],
           [17, -1],
           [17, 22],
           [14, -1],
           [20, -1],
           [14, 20],
           [21, -1],
           [16, -1],
           [16, 21],
           [23, -1],
           [15, -1],
           [15, 23],
           [10, -1],
           [ 6, 10],
           [ 6, 23],
           [ 2, -1],
           [ 2, 10],
           [11, -1],
           [ 1,  2],
           [ 1, 11],
           [ 7, 11],
           [ 7, 21],
           [31, -1],
           [16, 34],
           [31, 34],
           [14, 32],
           [31, 32],
           [18, -1],
           [ 8, 18],
           [ 8, 20],
           [ 0, -1],
           [ 0,  3],
           [ 3, 18],
           [19, -1],
           [ 0,  4],
           [ 4, 19],
           [ 9, 19],
           [ 9, 22],
           [30, -1],
           [17, 35],
           [30, 35],
           [15, 33],
           [30, 33],
           [12, 26],
           [25, 26],
           [25, 36],
           [12, 38],
           [36, 38],
           [13, 29],
           [24, 29],
           [13, 37],
           [24, 39],
           [37, 39],
           [ 5, 28],
           [ 5, 27],
           [ 3, 27],
           [ 4, 28],
           [ 1,  5],
           [28, 29],
           [ 6, 13],
           [26, 27],
           [ 7, 12],
           [ 8, 25],
           [ 9, 24],
           [32, 36],
           [33, 37],
           [34, 38],
           [35, 39]])).all()
    
    
    assert (faces.mesure == np.array([0.2000000000008322 , 0.1666666666662513 , 0.19917088871995992,
           0.1666666666673601 , 0.20000000000000018, 0.197252609056214  ,
           0.20000000000052665, 0.1666666666662044 , 0.20325291154944997,
           0.1999999999995579 , 0.1666666666671056 , 0.20409561384468589,
           0.199999999999417  , 0.234836576318635  , 0.146219037518422  ,
           0.19999999999997192, 0.16159151228764745, 0.20000000000052653,
           0.27762459564949526, 0.17801355047617606, 0.23074410633278214,
           0.14927758407984426, 0.1666666666664355 , 0.1500014895762899 ,
           0.1298947185131292 , 0.1456711645417736 , 0.12945295253588018,
           0.19999999999861295, 0.19558306893497207, 0.1480264301202072 ,
           0.19999999999972246, 0.21211649004127905, 0.16995824626968217,
           0.2000000000008322 , 0.21211649004022012, 0.166110868147162  ,
           0.2061901316214509 , 0.14746696376131055, 0.1666666666666431 ,
           0.14786470488532721, 0.13003965662742156, 0.15345532869944342,
           0.13015785950070766, 0.13898917977175146, 0.12962545242562687,
           0.1489885845892195 , 0.1431447734629311 , 0.13953746358220864,
           0.16159151228764715, 0.1376052741550936 , 0.14283339113804178,
           0.14723252492957148, 0.13898277663709524, 0.1996297975110792 ,
           0.203051782642193  , 0.18008407449861746, 0.1660571217415806 ,
           0.27381801450781484, 0.1902269024854012 , 0.22295199084360415,
           0.1789496528040973 , 0.20880811015575315, 0.1815735045257446 ,
           0.19325343950721113, 0.12119535505598508, 0.12337499071137685,
           0.12063223531987088, 0.12174164704125683])).all()
    
    
    assert (faces.normal == np.array([[-0.0000000000000000e+00, -2.0000000000083221e-01,
            -0.0000000000000000e+00],
           [-1.6666666666625130e-01,  0.0000000000000000e+00,
             0.0000000000000000e+00],
           [ 1.3674854922127999e-01, -1.4480634378152710e-01,
            -0.0000000000000000e+00],
           [ 1.6666666666736010e-01, -0.0000000000000000e+00,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00, -2.0000000000000018e-01,
             0.0000000000000000e+00],
           [-1.3639884413504061e-01, -1.4249191941337758e-01,
             0.0000000000000000e+00],
           [-0.0000000000000000e+00,  2.0000000000052665e-01,
            -0.0000000000000000e+00],
           [ 1.6666666666620439e-01,  0.0000000000000000e+00,
             0.0000000000000000e+00],
           [-1.3976723086792692e-01,  1.4756987236167196e-01,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00,  1.9999999999955789e-01,
             0.0000000000000000e+00],
           [-1.6666666666710561e-01, -0.0000000000000000e+00,
            -0.0000000000000000e+00],
           [ 1.3765277838656448e-01,  1.5068753164445459e-01,
             0.0000000000000000e+00],
           [ 0.0000000000000000e+00,  1.9999999999941701e-01,
             0.0000000000000000e+00],
           [ 1.5925000365142677e-01,  1.7259100183404300e-01,
             0.0000000000000000e+00],
           [-1.3765277838656448e-01,  4.9312468355103306e-02,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00,  1.9999999999997192e-01,
             0.0000000000000000e+00],
           [-1.5925000365142677e-01,  2.7408998165374010e-02,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00,  2.0000000000052653e-01,
             0.0000000000000000e+00],
           [-1.5925000365142677e-01,  2.2740899816534593e-01,
            -0.0000000000000000e+00],
           [ 1.7193671854251258e-01,  4.6114953864954678e-02,
             0.0000000000000000e+00],
           [-1.7193671854251258e-01,  1.5388504613557186e-01,
            -0.0000000000000000e+00],
           [ 1.3976723086792692e-01,  5.2430127638854684e-02,
             0.0000000000000000e+00],
           [ 1.6666666666643551e-01,  0.0000000000000000e+00,
             0.0000000000000000e+00],
           [-2.6899435798277471e-02, -1.4756987236167196e-01,
             0.0000000000000000e+00],
           [-8.3677046265262900e-02,  9.9351848628629558e-02,
            -0.0000000000000000e+00],
           [-3.0267822532319494e-02,  1.4249191941337758e-01,
            -0.0000000000000000e+00],
           [-8.2989620401172609e-02, -9.9351848628629558e-02,
             0.0000000000000000e+00],
           [ 0.0000000000000000e+00, -1.9999999999861295e-01,
             0.0000000000000000e+00],
           [-1.5172639814172789e-01, -1.2341732844685915e-01,
             0.0000000000000000e+00],
           [ 1.3639884413504061e-01, -5.7508080586622601e-02,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00, -1.9999999999972246e-01,
             0.0000000000000000e+00],
           [ 1.8706524355752241e-01,  1.0000000000098430e-01,
            -0.0000000000000000e+00],
           [ 1.5172639814172789e-01, -7.6582671551753800e-02,
            -0.0000000000000000e+00],
           [ 0.0000000000000000e+00, -2.0000000000083221e-01,
             0.0000000000000000e+00],
           [-1.8706524355752241e-01,  9.9999999998738154e-02,
             0.0000000000000000e+00],
           [-1.5382462866228311e-01, -6.2696125346902831e-02,
             0.0000000000000000e+00],
           [ 1.5382462866228311e-01, -1.3730387465392938e-01,
            -0.0000000000000000e+00],
           [-1.3674854922127999e-01, -5.5193656219305109e-02,
             0.0000000000000000e+00],
           [-1.6666666666664309e-01,  0.0000000000000000e+00,
             0.0000000000000000e+00],
           [ 2.9918117444971304e-02,  1.4480634378152710e-01,
             0.0000000000000000e+00],
           [ 8.3241065051236796e-02, -9.9906142878771337e-02,
            -0.0000000000000000e+00],
           [ 2.9013888280541134e-02, -1.5068753164445459e-01,
            -0.0000000000000000e+00],
           [ 8.3425601615406297e-02,  9.9906142878771337e-02,
             0.0000000000000000e+00],
           [-7.8063281456909717e-02, -1.1499615724798606e-01,
             0.0000000000000000e+00],
           [-9.8273601858849813e-02,  8.4528439558746893e-02,
            -0.0000000000000000e+00],
           [ 1.1360115586553710e-01,  9.6396969474734862e-02,
             0.0000000000000000e+00],
           [ 1.1023276913149538e-01, -9.1319016526440477e-02,
            -0.0000000000000000e+00],
           [ 3.4371293204499276e-04,  1.3953704025948288e-01,
             0.0000000000000000e+00],
           [ 9.0749996349000328e-02, -1.3370211294540280e-01,
            -0.0000000000000000e+00],
           [ 9.6175371337289789e-02,  9.8414985766563490e-02,
             0.0000000000000000e+00],
           [-1.1234722161386262e-01, -8.8201357243743506e-02,
             0.0000000000000000e+00],
           [-1.1325145077829291e-01,  9.4082545106670995e-02,
            -0.0000000000000000e+00],
           [ 9.2268282084806419e-05, -1.3898274600942676e-01,
             0.0000000000000000e+00],
           [-1.5368475279105082e-01, -1.2740899816680168e-01,
             0.0000000000000000e+00],
           [ 1.4099803789996501e-01, -1.4611495386349893e-01,
            -0.0000000000000000e+00],
           [ 3.5338845415794518e-02,  1.7658267155273810e-01,
             0.0000000000000000e+00],
           [-3.3240614895239301e-02,  1.6269612534564099e-01,
            -0.0000000000000000e+00],
           [-1.2686714891085804e-02, -2.7352395203030061e-01,
            -0.0000000000000000e+00],
           [-1.8692536768629012e-01,  3.5287127178839306e-02,
            -0.0000000000000000e+00],
           [-2.1597225264862296e-02, -2.2190347018914630e-01,
             0.0000000000000000e+00],
           [-1.7633688331575953e-01, -3.0467717689239171e-02,
            -0.0000000000000000e+00],
           [ 3.2169487674585662e-02, -2.0631517377442654e-01,
            -0.0000000000000000e+00],
           [ 1.5327554006687283e-02,  1.8092540903348175e-01,
             0.0000000000000000e+00],
           [-1.7076079441003117e-02,  1.9249753087323448e-01,
            -0.0000000000000000e+00],
           [-1.1325744293349210e-01,  4.3140070784748019e-02,
             0.0000000000000000e+00],
           [ 1.1243948989594743e-01, -5.0781388765683250e-02,
             0.0000000000000000e+00],
           [-1.1057648206354037e-01, -4.8218023733042403e-02,
            -0.0000000000000000e+00],
           [ 1.1315918249620810e-01,  4.4900200902755760e-02,
            -0.0000000000000000e+00]])).all()

test_serial_readmesh()
